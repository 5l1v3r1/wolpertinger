#include "cute.h"
#include "ide_listener.h"
#include "cute_runner.h"

#include <netinet/in.h>
#include <arpa/inet.h>

#include "shared.h"
#include "ipc.h"
#include "drone.h"

bool error = false;

void _display(int type, const char *file, int lineno, const char *fmt, ...) 
{
	switch (type) {
		case MSG_WARN:
			break;			
			
		case MSG_ERR:
			error = true;
			break;

		case MSG_DBG:
		case MSG_TRC:
			break;

		case MSG_VBS:
		case MSG_USR:
			break;		
	}
}



void cidr32() {
	drone_list dl;

	unsigned int res = dl.add_hostexp((char*) "192.168.1.10/32");

	ASSERT_EQUALM("192.168.1.10/32 should be one IP", 1u, res);
	ASSERT_EQUALM("target count should be ONE", 1u, dl.target_buffer.size());
	ASSERT_EQUALM("target should be 192.168.1.10", inet_addr("192.168.1.10"), dl.target_buffer[0].ipaddr);
	ASSERT_EQUALM("target should have range 1", 1u, dl.target_buffer[0].range);
}

void invalidip() {
	drone_list dl;

	error = false;
	unsigned int res = dl.add_hostexp((char*) "1");

	ASSERT_EQUALM("an error should have occured", true, error);
	ASSERT_EQUALM("1 should be no IP", 0u, res);
	ASSERT_EQUALM("target count should be ZERO", 0u, dl.target_buffer.size());

	error = false;
	res = dl.add_hostexp((char*) "1.2.3");

	ASSERT_EQUALM("an error should have occured", true, error);
	ASSERT_EQUALM("1.2.3 should be no IP", 0u, res);
	ASSERT_EQUALM("target count should still be ZERO", 0u, dl.target_buffer.size());
}

void validhostname() {
	drone_list dl;

	unsigned int res = dl.add_hostexp((char*) "www.syss.de");

	ASSERT_EQUALM("www.syss.de should be one IP", 1u, res);
	ASSERT_EQUALM("target count should be ONE", 1u, dl.target_buffer.size());
	ASSERT_EQUALM("www.syss.de should be 37.202.2.212", inet_addr("37.202.2.212"), dl.target_buffer[0].ipaddr);
	ASSERT_EQUALM("target should have range 1", 1u, dl.target_buffer[0].range);

	res = dl.add_hostexp((char*) "heise.de");

	ASSERT_EQUALM("www.syss.de and heise.de should be two IPs", 2u, res);
	ASSERT_EQUALM("target count should be two", 2u, dl.target_buffer.size());
}

void rangefromzero() {
	drone_list dl;

	unsigned int res = dl.add_hostexp((char*) "127.0.0-1.0");

	ASSERT_EQUALM("127.0.0-1.0 should be 2 IPs", 2u, res);
	ASSERT_EQUALM("target count should be two", 2u, dl.target_buffer.size());

	res = dl.add_hostexp((char*) "127.0.0.0-1");

	ASSERT_EQUALM("127.0.0.0-1 and 127.0.0-1.0 should be four IPs", 4u, res);
	ASSERT_EQUALM("target count should be three", 3u, dl.target_buffer.size());
	ASSERT_EQUALM("127.0.0.0-1 should start with IP 127.0.0.0", inet_addr("127.0.0.0"), dl.target_buffer[2].ipaddr);
	ASSERT_EQUALM("target should have range 2", 2u, dl.target_buffer[2].range);
}

void manyhosts() {
	drone_list dl;
    unsigned long res;

    for (unsigned long i=0; i<14000; ++i) {
        unsigned long z = (unsigned int) inet_addr("127.0.0.0") + htonl(i);
    	res = dl.add_hostexp((char*) inet_ntoa(*(struct in_addr *)&z));
        //printf("%lu %s\n", i, inet_ntoa(*(struct in_addr *)&z));
        ASSERT_EQUALM("Buffer-Overflow: Number of IPs is suddently wrong", (i+1), res);
	}
}

void manyports() {
    drone_list dl;
    unsigned long res;
    char portstr[65535*6];
    char *p = portstr + snprintf(portstr, 7, "1");

    for (unsigned long i=2; i<=5000; ++i) {
        //printf("%s\n", portstr);
        p += snprintf(p, 7, ",%lu", i);
	}

    res = dl.add_portstr(portstr);
    ASSERT_EQUALM("Number of added ports is wrong", 5000, res);
}

void invalidportstring() {
	drone_list dl;
	unsigned long res;
	char *portstr = (char*) "80,23,443,21,22,25,3389,110,445,139,143,53,135,3306,8080,1723,111,995,993,5900,1025,587,8888,199,H.323,465,548,113,81,6001,10000,514,5060,179,1026,2000,8443,8000,32768,554,26,1433,49152,2001,515,8008,49154,1027,5666,646,5000,5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,990,5357,427,49156,543,544,5101,144,7,389,8009,3128,444,9999,5009,7070,5190,3000,5432,1900,3986,13,1029,9,5051,6646,49157,1028,873,1755,2717,4899,9100,119,37,1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,5050,19,8031,1041,255,1056,1049,1065,2967,1048,1053,1064,1054,3703,17,808,3689,1031,1044,1071,5901,100,9102,8010,2869,1039,4001,9000,5120,2105,636,1038,2601,1,7000,1066,1069,625,311,280,254,4000,1993,1761,5003,2002,2005,1998,1032,1050,6112,3690,1521,2161,6002,1080,2401,902,4045,7937,787,1058,2383,32771,1040,1033,1059,50000,5555,10001,1494,593,3,2301,1,7938,3268,1022,1234,1074,9001,8002,1036,1035,1037,464,1935,6666,2003,497,6543,1352,24,3269,1111,407,500,20,2006,1034,3260,15000,1218,4444,264,33,2004,1042,42510,3052,999,1023,1068,222,7100,888,4827,1999,563,1717,992,32770,2008,32772,7001,8082,2007,740,5550,5801,512,1043,2009,7019,50001,2701,1700,4662,2065,2010,42,2602,3333,161,9535,5100,5002,2604,4002,6059,1047,8194,8193,8192,9595,9594,9593,16993,16992,6789,5226,5225,32769,1052,3283,1062,9415,8701,8652,8651,8089,65389,65000,64680,64623,55600,55555,52869,35500,33354,23502,20828,2702,1311,1060,4443,1051,1055,730,731,709,1067,13782,5902,366,9050,1002,85,5500,1863,8085,51103,49999,45100,10243,5431,1864,49,3495,6667,90,475,27000,1503,6881,1500,8021,340,78,5566,8088,9071,8899,6005,32774,32773,9876,1501,9101,5102,5679,163,648,1666,146,901,83,9207,8001,8083,5004,3476,8084,5214,14238,12345,912,30,2605,2030,6,541,3005,8007,4,1248,2500,880,306,4242,1097,9009,2525,1086,1088,8291,52822,900,6101,7200,2809,395,211,32775,12000,1083,987,800,705,20005,711,13783,6969,1104,5269,5222,1085,1046,5987,5989,5988,1169,2190,11967,8600,5030,5414,1057,7627,6788,8087,1947,9010,7741,14000,3367,1094,1099,1098,3031,1075,1081,1093,4449,2718,6580,4129,6901,3827,3580,1100,2144,1063,1061,9900,1107,1106,20222,7778,1077,3801,1310,2119,2811,9080,2492,2135,1070,1045,2399,3017,10002,1148,9002,8873,2875,5718,20000,8086,3998,2607,4126,1272,5911,3071,5910,9618,2381,1096,1072,3351,1073,3784,5633,15660,6123,3211,1078,1079,3659,3551,2260,2160,1082,2100,16001,3325,3323,9968,9503,9502,9485,9290,9220,9011,8994,8649,8333,8222,8181,7911,7625,7106,65129,63331,6156,6129,60020,5962,5961,5960,5959,5925,5877,5825,5810,58080,57294,50800,50006,50003,49160,49159,49158,48080,40193,3766,34573,34572,34571,3404,33899,3301,3300,32782,32781,31038,30718,30000,28201,27715,25734,24800,22939,21571,20221,20031,19842,19801,19101,17988,1783,16018,16016,15003,15002,14442,13456,11110,10629,10628,10626,10621,10617,10616,10566,10025,10024,10012,1108,4003,1687,1840,9500,1718,8400,6389,7777,8402,691,89,32776,1999,212,2020,1001,6003,7002,2998,50002,898,3372,5510,32,2033,4165,3061,5903,99,749,425,5405,43,6502,6106,13722,7007,458,8100,3737,5298,4111,3261,1152,2522,5859,1247,2191,3011,5200,3851,3371,3370,3369,7402,5054,2126,3918,3077,7443,3493,3828,4446,1186,2179,1183,19315,19283,3995,5963,3880,1124,8500,1089,10004,2251,9998,1087,5280,3871,3030,62078,9091,1334,9944,9943,9877,9666,9110,8654,8254,8180,8090,8011,7512,7435,7103,61900,61532,5922,5915,5904,5822,56738,55055,51493,50636,50389,49175,49165,49163,3546,32784,27355,27353,27352,24444,19780,18988,16012,15742,10778,1580,4006,1782,1296,9040,32777,32779,1021,32778,616,666,700,2021,5802,4321,1112,545,1524,49400,84,38292,2040,2111,32780,1084,1600,2048,3006,2638,6699,9111,16080,6547,6007,1533,5560,2106,1443,667,720,2034,555,801,6025,3221,3826,9200,2608,4279,7025,11111,3527,4445,1151,8200,8300,4567,6689,10009,6100,8800,5730,2394,2393,2725,5061,6566,5678,3800,4550,5080,1201,3168,3814,1862,9898,1114,6510,3905,8383,3914,3971,3809,7999,7676,3517,4900,3869,9418,2909,3878,8042,1091,1090,1271,3920,6567,1138,10003,3945,1175,1199,3390,3889,3003,1131,8292,1119,1117,4848,7800,16000,3324,3322,5221,9917,9878,9575,9099,9081,9003,8290,8099,8093,8045,7921,7920,7496,6839,6792,6779,6692,6565,60443,5952,5950,5907,5906,5862,5850,5815,5811,57797,56737,5544,55056,5440,54328,54045,52848,52673,5087,50500,5033,50300,49176,49167,49161,44501,44176,41511,40911,32785,32783,30951,27356,26214,25735,19350,18101,18040,17877,16113,15004,14441,12265,12174,10215,10180,4004,4005,8022,1122,2323,4224,617,777,417,714,6346,981,722,1009,4998,70,2022,1076,5999,668,10082,765,301,524,2041,6009,1417,1434,259,44443,1984,7004,2068,1007,4343,416,2038,6006,109,4125,1461,9103,911,726,1010,2046,2035,7201,687,125,903,6669,6668,1455,1011,2013,2043,481,2047,683,31337,9929,5998,406,44442,783,256,843,2042,2045,4040,6060,6051,1145,3916,9443,9444,1875,7272,4252,4200,7024,1556,13724,1141,1233,8765,1137,3963,2910,9191,3808,8686,3981,2710,3852,3849,3944,3853,9988,1163,4164,3820,3162,6481,3731,5081,40000,8097,4555,3863,1287,2920,4430,7744,1812,7913,1166,1164,1165,8019,10160,4658,4600,3304,3307,1259";
	
	res = dl.add_portstr(portstr);
    ASSERT_EQUALM("Portstring should be invalid", 0, res);
}

void validportstring() {
	drone_list dl;
	unsigned long res;
	char *portstr = (char*) "80,23,443,21,22,25,3389,110,445,139,143,53,135,3306,8080,1723,111,995,993,5900,1025,587,8888,199,323,465,548,113,81,6001,10000,514,5060,179,1026,2000,8443,8000,32768,554,26,1433,49152,2001,515,8008,49154,1027,5666,646,5000,5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,990,5357,427,49156,543,544,5101,144,7,389,8009,3128,444,9999,5009,7070,5190,3000,5432,1900,3986,13,1029,9,5051,6646,49157,1028,873,1755,2717,4899,9100,119,37,1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,5050,19,8031,1041,255,1056,1049,1065,2967,1048,1053,1064,1054,3703,17,808,3689,1031,1044,1071,5901,100,9102,8010,2869,1039,4001,9000,5120,2105,636,1038,2601,1,7000,1066,1069,625,311,280,254,4000,1993,1761,5003,2002,2005,1998,1032,1050,6112,3690,1521,2161,6002,1080,2401,902,4045,7937,787,1058,2383,32771,1040,1033,1059,50000,5555,10001,1494,593,3,2301,1,7938,3268,1022,1234,1074,9001,8002,1036,1035,1037,464,1935,6666,2003,497,6543,1352,24,3269,1111,407,500,20,2006,1034,3260,15000,1218,4444,264,33,2004,1042,42510,3052,999,1023,1068,222,7100,888,4827,1999,563,1717,992,32770,2008,32772,7001,8082,2007,740,5550,5801,512,1043,2009,7019,50001,2701,1700,4662,2065,2010,42,2602,3333,161,9535,5100,5002,2604,4002,6059,1047,8194,8193,8192,9595,9594,9593,16993,16992,6789,5226,5225,32769,1052,3283,1062,9415,8701,8652,8651,8089,65389,65000,64680,64623,55600,55555,52869,35500,33354,23502,20828,2702,1311,1060,4443,1051,1055,730,731,709,1067,13782,5902,366,9050,1002,85,5500,1863,8085,51103,49999,45100,10243,5431,1864,49,3495,6667,90,475,27000,1503,6881,1500,8021,340,78,5566,8088,9071,8899,6005,32774,32773,9876,1501,9101,5102,5679,163,648,1666,146,901,83,9207,8001,8083,5004,3476,8084,5214,14238,12345,912,30,2605,2030,6,541,3005,8007,4,1248,2500,880,306,4242,1097,9009,2525,1086,1088,8291,52822,900,6101,7200,2809,395,211,32775,12000,1083,987,800,705,20005,711,13783,6969,1104,5269,5222,1085,1046,5987,5989,5988,1169,2190,11967,8600,5030,5414,1057,7627,6788,8087,1947,9010,7741,14000,3367,1094,1099,1098,3031,1075,1081,1093,4449,2718,6580,4129,6901,3827,3580,1100,2144,1063,1061,9900,1107,1106,20222,7778,1077,3801,1310,2119,2811,9080,2492,2135,1070,1045,2399,3017,10002,1148,9002,8873,2875,5718,20000,8086,3998,2607,4126,1272,5911,3071,5910,9618,2381,1096,1072,3351,1073,3784,5633,15660,6123,3211,1078,1079,3659,3551,2260,2160,1082,2100,16001,3325,3323,9968,9503,9502,9485,9290,9220,9011,8994,8649,8333,8222,8181,7911,7625,7106,65129,63331,6156,6129,60020,5962,5961,5960,5959,5925,5877,5825,5810,58080,57294,50800,50006,50003,49160,49159,49158,48080,40193,3766,34573,34572,34571,3404,33899,3301,3300,32782,32781,31038,30718,30000,28201,27715,25734,24800,22939,21571,20221,20031,19842,19801,19101,17988,1783,16018,16016,15003,15002,14442,13456,11110,10629,10628,10626,10621,10617,10616,10566,10025,10024,10012,1108,4003,1687,1840,9500,1718,8400,6389,7777,8402,691,89,32776,1999,212,2020,1001,6003,7002,2998,50002,898,3372,5510,32,2033,4165,3061,5903,99,749,425,5405,43,6502,6106,13722,7007,458,8100,3737,5298,4111,3261,1152,2522,5859,1247,2191,3011,5200,3851,3371,3370,3369,7402,5054,2126,3918,3077,7443,3493,3828,4446,1186,2179,1183,19315,19283,3995,5963,3880,1124,8500,1089,10004,2251,9998,1087,5280,3871,3030,62078,9091,1334,9944,9943,9877,9666,9110,8654,8254,8180,8090,8011,7512,7435,7103,61900,61532,5922,5915,5904,5822,56738,55055,51493,50636,50389,49175,49165,49163,3546,32784,27355,27353,27352,24444,19780,18988,16012,15742,10778,1580,4006,1782,1296,9040,32777,32779,1021,32778,616,666,700,2021,5802,4321,1112,545,1524,49400,84,38292,2040,2111,32780,1084,1600,2048,3006,2638,6699,9111,16080,6547,6007,1533,5560,2106,1443,667,720,2034,555,801,6025,3221,3826,9200,2608,4279,7025,11111,3527,4445,1151,8200,8300,4567,6689,10009,6100,8800,5730,2394,2393,2725,5061,6566,5678,3800,4550,5080,1201,3168,3814,1862,9898,1114,6510,3905,8383,3914,3971,3809,7999,7676,3517,4900,3869,9418,2909,3878,8042,1091,1090,1271,3920,6567,1138,10003,3945,1175,1199,3390,3889,3003,1131,8292,1119,1117,4848,7800,16000,3324,3322,5221,9917,9878,9575,9099,9081,9003,8290,8099,8093,8045,7921,7920,7496,6839,6792,6779,6692,6565,60443,5952,5950,5907,5906,5862,5850,5815,5811,57797,56737,5544,55056,5440,54328,54045,52848,52673,5087,50500,5033,50300,49176,49167,49161,44501,44176,41511,40911,32785,32783,30951,27356,26214,25735,19350,18101,18040,17877,16113,15004,14441,12265,12174,10215,10180,4004,4005,8022,1122,2323,4224,617,777,417,714,6346,981,722,1009,4998,70,2022,1076,5999,668,10082,765,301,524,2041,6009,1417,1434,259,44443,1984,7004,2068,1007,4343,416,2038,6006,109,4125,1461,9103,911,726,1010,2046,2035,7201,687,125,903,6669,6668,1455,1011,2013,2043,481,2047,683,31337,9929,5998,406,44442,783,256,843,2042,2045,4040,6060,6051,1145,3916,9443,9444,1875,7272,4252,4200,7024,1556,13724,1141,1233,8765,1137,3963,2910,9191,3808,8686,3981,2710,3852,3849,3944,3853,9988,1163,4164,3820,3162,6481,3731,5081,40000,8097,4555,3863,1287,2920,4430,7744,1812,7913,1166,1164,1165,8019,10160,4658,4600,3304,3307,1259";
	
	res = dl.add_portstr(portstr);
    ASSERT_EQUALM("Number of added ports is wrong", 1000, res);
}

void runSuite(){
	cute::suite s;

	//TODO add your test here
	s.push_back(CUTE(cidr32));
	s.push_back(CUTE(invalidip));
	s.push_back(CUTE(validhostname));
	s.push_back(CUTE(rangefromzero));
    s.push_back(CUTE(manyhosts));
    s.push_back(CUTE(manyports));
	s.push_back(CUTE(invalidportstring));
	s.push_back(CUTE(validportstring));
    
	cute::ide_listener<> lis;
	cute::makeRunner(lis)(s, "drone");
}

int main(){
    runSuite();
    return 0;
}

